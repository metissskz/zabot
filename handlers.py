from aiogram import Router, F, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from states import FenceCalc
from pdf_generator import generate_pdf
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import os

router = Router()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìê –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞–±–æ—Ä")],
        [KeyboardButton(text="üß† –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å GPT")],
        [KeyboardButton(text="üìÑ –ü–æ–ª—É—á–∏—Ç—å PDF")],
        [KeyboardButton(text="üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç")],
        [KeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏")]
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
)

@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç ZaborOFF ‚Äî –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞–±–æ—Ä –∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ö–ü.
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )

@router.message(F.text == "üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç")
async def open_site(message: types.Message):
    await message.answer("üåê –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç: https://zaboroff.kz")

@router.message(F.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏")
async def contact_us(message: types.Message):
    await message.answer("üì± –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ WhatsApp: https://wa.me/77022319176")

@router.message(F.text == "üìÑ –ü–æ–ª—É—á–∏—Ç—å PDF")
async def get_pdf(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if not data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –∑–∞–±–æ—Ä üìê")
        return
    file_path = generate_pdf(data)
    await message.answer_document(types.FSInputFile(file_path), caption="üìÑ –í–∞—à–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
    await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu)

@router.message(F.text == "üìê –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞–±–æ—Ä")
async def start_calc(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–±–æ—Ä–∞:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü—Ä–æ—Ñ–Ω–∞—Å—Ç–∏–ª")],
            [KeyboardButton(text="–ë–ª–æ–∫–∏")]
        ],
        resize_keyboard=True
    ))
    await state.set_state(FenceCalc.choosing_type)

@router.message(FenceCalc.choosing_type)
async def choose_type(message: types.Message, state: FSMContext):
    await state.update_data(fence_type=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –∑–∞–±–æ—Ä–∞ –≤ –º–µ—Ç—Ä–∞—Ö:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(FenceCalc.entering_length)

@router.message(FenceCalc.entering_length)
async def enter_length(message: types.Message, state: FSMContext):
    try:
        length = float(message.text)
        await state.update_data(length=length)
        await message.answer("–ë—É–¥–µ—Ç –ª–∏ –ª–µ–Ω—Ç–æ—á–Ω—ã–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç? (–î–∞/–ù–µ—Ç)")
        await state.set_state(FenceCalc.foundation)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 50")

@router.message(FenceCalc.foundation)
async def ask_foundation(message: types.Message, state: FSMContext):
    answer = message.text.strip().lower()
    if answer not in ("–¥–∞", "–Ω–µ—Ç"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –î–∞ –∏–ª–∏ –ù–µ—Ç.")
        return
    has_foundation = answer == "–¥–∞"
    await state.update_data(foundation=has_foundation)
    await message.answer("–ï—Å—Ç—å –ª–∏ —É–∫–ª–æ–Ω –Ω–∞ —É—á–∞—Å—Ç–∫–µ? (–î–∞/–ù–µ—Ç)")
    await state.set_state(FenceCalc.slope)

@router.message(FenceCalc.slope)
async def ask_slope(message: types.Message, state: FSMContext):
    answer = message.text.strip().lower()
    if answer not in ("–¥–∞", "–Ω–µ—Ç"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –î–∞ –∏–ª–∏ –ù–µ—Ç.")
        return
    slope = answer == "–¥–∞"
    await state.update_data(slope=slope)
    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã. –§–æ—Ä–º–∏—Ä—É—é —Ä–∞—Å—á—ë—Ç...", reply_markup=main_menu)
    # –ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–∏ —Ä–∞—Å—á–µ—Ç–∞ —Ç—É—Ç
