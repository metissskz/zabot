from aiogram import F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram import Router
from pdf_generator import generate_pdf
from aiogram.types import FSInputFile

router = Router()

class FenceCalc(StatesGroup):
    choosing_type = State()
    choosing_post = State()
    entering_length = State()
    choosing_foundation = State()
    entering_found_width = State()
    entering_found_height = State()

@router.message(F.text.lower() == "—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞–±–æ—Ä")
async def start_calc(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="–ü—Ä–æ—Ñ–Ω–∞—Å—Ç–∏–ª")],
        [KeyboardButton(text="–ë–ª–æ–∫–∏")]
    ], resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–±–æ—Ä–∞:", reply_markup=kb)
    await state.set_state(FenceCalc.choosing_type)

@router.message(FenceCalc.choosing_type)
async def choose_type(message: types.Message, state: FSMContext):
    await state.update_data(fence_type=message.text)
    kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="–ú–µ—Ç–∞–ª–ª")],
        [KeyboardButton(text="–ë–ª–æ–∫–∏")]
    ], resize_keyboard=True)
    await message.answer("–°—Ç–æ–π–∫–∏ –∏–∑ –º–µ—Ç–∞–ª–ª–∞ –∏–ª–∏ –±–ª–æ–∫–æ–≤?", reply_markup=kb)
    await state.set_state(FenceCalc.choosing_post)

@router.message(FenceCalc.choosing_post)
async def choose_post(message: types.Message, state: FSMContext):
    await state.update_data(post_type=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –∑–∞–±–æ—Ä–∞ –≤ –º–µ—Ç—Ä–∞—Ö:")
    await state.set_state(FenceCalc.entering_length)

@router.message(FenceCalc.entering_length)
async def enter_length(message: types.Message, state: FSMContext):
    try:
        length = float(message.text)
        await state.update_data(length=length)
        kb = ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="–î–∞")],
            [KeyboardButton(text="–ù–µ—Ç")]
        ], resize_keyboard=True)
        await message.answer("–ù—É–∂–µ–Ω –ª–∏ –ª–µ–Ω—Ç–æ—á–Ω—ã–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç?", reply_markup=kb)
        await state.set_state(FenceCalc.choosing_foundation)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 30")

@router.message(FenceCalc.choosing_foundation)
async def choose_foundation(message: types.Message, state: FSMContext):
    if message.text.lower() == "–¥–∞":
        await state.update_data(foundation=True)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞ –≤ –º–µ—Ç—Ä–∞—Ö:")
        await state.set_state(FenceCalc.entering_found_width)
    else:
        await state.update_data(foundation=False, foundation_volume=0)
        await finish_calc(message, state)

@router.message(FenceCalc.entering_found_width)
async def enter_found_width(message: types.Message, state: FSMContext):
    try:
        width = float(message.text)
        await state.update_data(found_width=width)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞ –≤ –º–µ—Ç—Ä–∞—Ö:")
        await state.set_state(FenceCalc.entering_found_height)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 0.3")

@router.message(FenceCalc.entering_found_height)
async def enter_found_height(message: types.Message, state: FSMContext):
    try:
        height = float(message.text)
        data = await state.get_data()
        length = data["length"]
        volume = round(length * data['found_width'] * height, 2)
        await state.update_data(foundation_volume=volume)
        await finish_calc(message, state)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 0.5")

async def finish_calc(message: types.Message, state: FSMContext):
    data = await state.get_data()
    length = data["length"]

    # –°—Ç–æ–π–∫–∏
    num_posts = int(length // 3) + 1
    post_price = 1500 * 2.5  # 2.5 –º –¥–ª–∏–Ω–∞ —Å—Ç–æ–π–∫–∏
    total_posts = num_posts * post_price

    # –õ–∞–≥–∏
    lag_length = length * 3
    lag_price = 800
    total_lags = lag_length * lag_price

    # –ü—Ä–æ—Ñ–Ω–∞—Å—Ç–∏–ª
    prof_sheet_width = 1.1
    num_sheets = int(length / prof_sheet_width) + 1
    prof_price = 14000
    total_prof = num_sheets * prof_price

    # –°–∞–º–æ—Ä–µ–∑—ã
    screw_packs = max(1, num_sheets // 7)
    screw_price = 2000
    total_screws = screw_packs * screw_price

    # –ë–µ—Ç–æ–Ω
    concrete_price = 22000
    if data["foundation"]:
        concrete_volume = data["foundation_volume"]
        total_concrete = int(concrete_volume * concrete_price)
    else:
        concrete_volume = 0
        total_concrete = 0

    materials = [
        {"name": "–°—Ç–æ–π–∫–∏ 60√ó60√ó2 –º–º", "count": num_posts, "price": post_price},
        {"name": "–õ–∞–≥–∏ 40√ó40√ó1.5 –º–º", "count": lag_length, "price": lag_price},
        {"name": "–ü—Ä–æ—Ñ–Ω–∞—Å—Ç–∏–ª 2√ó1.1 –º", "count": num_sheets, "price": prof_price},
        {"name": "–°–∞–º–æ—Ä–µ–∑—ã (–ø–∞—á–∫–∞)", "count": screw_packs, "price": screw_price}
    ]
    if data['foundation']:
        materials.append({"name": "–ë–µ—Ç–æ–Ω –ú300", "count": concrete_volume, "price": concrete_price})

    data.update({"materials": materials})

    path = generate_pdf(data)
    await message.answer_document(FSInputFile(path), caption="üìÑ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!")
    await state.clear()
