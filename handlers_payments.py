# handlers_payments.py
from aiogram import Router, F, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from db import add_pending_payment, get_pending_payments, confirm_payment, reject_payment

router = Router()

ADMINS = [77022319176]  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

@router.message(F.text == "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def pay_by_qr(message: types.Message):
    await message.answer_photo(
        photo="https://example.com/kaspi_qr.png",  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π QR
        caption=(
            "üì≤ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –≤ Kaspi –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫.

"
            "üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å 1 –ö–ü: *200 ‚Ç∏*
"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ: `–û–ø–ª–∞—Ç–∏–ª 200` –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞."
        ),
        parse_mode="Markdown"
    )

@router.message(F.text.startswith("–û–ø–ª–∞—Ç–∏–ª"))
async def save_payment_request(message: types.Message):
    amount_str = message.text.replace("–û–ø–ª–∞—Ç–∏–ª", "").strip()
    try:
        amount = int(amount_str)
        await add_pending_payment(message.from_user.id, amount, None)
        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º.")
    except:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: `–û–ø–ª–∞—Ç–∏–ª 200`.")

@router.message(F.photo)
async def save_payment_photo(message: types.Message):
    file_id = message.photo[-1].file_id
    await add_pending_payment(message.from_user.id, 200, file_id)
    await message.answer("‚úÖ –§–æ—Ç–æ —á–µ–∫–∞ –ø–æ–ª—É—á–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

@router.message(F.text == "/–ø–ª–∞—Ç–µ–∂–∏")
async def list_payments(message: types.Message):
    if message.from_user.id not in ADMINS:
        return
    payments = await get_pending_payments()
    if not payments:
        await message.answer("üì¨ –ù–µ—Ç –∑–∞—è–≤–æ–∫.")
        return
    for p in payments:
        text = f"üìè –ó–∞—è–≤–∫–∞ #{p['id']}\nüë§ {p['telegram_id']}\nüí∏ {p['amount']} ‚Ç∏\n‚è∞ {p['created_at']}"
        markup = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å {p['id']}")],
                [KeyboardButton(text=f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å {p['id']}")]
            ],
            resize_keyboard=True
        )
        await message.answer(text, reply_markup=markup)

@router.message(F.text.startswith("\u2705 \u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c"))
async def confirm_payment_cmd(message: types.Message):
    if message.from_user.id not in ADMINS:
        return
    pid = int(message.text.split()[-1])
    await confirm_payment(pid)
    await message.answer("\u2705 \u041f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u043e.")

@router.message(F.text.startswith("\u274c \u041e\u0442\u043a\u043b\u043e\u043d\u0438\u0442\u044c"))
async def reject_payment_cmd(message: types.Message):
    if message.from_user.id not in ADMINS:
        return
    pid = int(message.text.split()[-1])
    await reject_payment(pid)
    await message.answer("\u274c \u0417\u0430\u044f\u0432\u043a\u0430 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0430.")
