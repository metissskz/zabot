import os
import asyncio
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    with_fundament = State()
    spacing = State()
    length = State()
    slope = State()
    currency = State()

# –•–µ–Ω–¥–ª–µ—Ä—ã
@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await state.clear()
    kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üî® –° —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–æ–º")],
        [KeyboardButton(text="üõ†Ô∏è –ë–µ–∑ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞")]
    ], resize_keyboard=True)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç ZaborOFF. –ì–æ—Ç–æ–≤ –∫ —Ä–∞—Å—á—ë—Ç–∞–º!", reply_markup=kb)
    await state.set_state(Form.with_fundament)

@router.message(Form.with_fundament)
async def ask_spacing(message: Message, state: FSMContext):
    await state.update_data(with_fundament=message.text)
    kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="2 –º–µ—Ç—Ä–∞")],
        [KeyboardButton(text="3 –º–µ—Ç—Ä–∞")]
    ], resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Å—Ç–æ–π–∫–∞–º–∏:", reply_markup=kb)
    await state.set_state(Form.spacing)

@router.message(Form.spacing)
async def ask_length(message: Message, state: FSMContext):
    await state.update_data(spacing=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –∑–∞–±–æ—Ä–∞ –≤ –º–µ—Ç—Ä–∞—Ö:")
    await state.set_state(Form.length)

@router.message(Form.length)
async def ask_slope(message: Message, state: FSMContext):
    await state.update_data(length=message.text)
    kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="–î–∞")],
        [KeyboardButton(text="–ù–µ—Ç")]
    ], resize_keyboard=True)
    await message.answer("–ï—Å—Ç—å –ª–∏ —É–∫–ª–æ–Ω –Ω–∞ —É—á–∞—Å—Ç–∫–µ?", reply_markup=kb)
    await state.set_state(Form.slope)

@router.message(Form.slope)
async def ask_currency(message: Message, state: FSMContext):
    await state.update_data(slope=message.text)
    kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="‚Ç∏ –¢–µ–Ω–≥–µ")],
        [KeyboardButton(text="‚ÇΩ –†—É–±–ª–∏")]
    ], resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", reply_markup=kb)
    await state.set_state(Form.currency)

@router.message(Form.currency)
async def complete(message: Message, state: FSMContext):
    data = await state.update_data(currency=message.text)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤–≤–æ–¥. –ü—Ä–æ–¥–æ–ª–∂–∏–º –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ...")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
