# bot_module.py

from aiogram import Router, F, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.types import FSInputFile
from datetime import datetime
import os
from fpdf import FPDF

# === FSM ===
class FenceCalc(StatesGroup):
    choosing_type = State()
    entering_length = State()
    foundation = State()
    slope = State()

# === Router ===
router = Router()

# === UI ===
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÄ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞–±–æ—Ä")],
        [KeyboardButton(text="üìÑ –ü–æ–ª—É—á–∏—Ç—å PDF")],
        [KeyboardButton(text="üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç")],
        [KeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏")],
        [KeyboardButton(text="üì¶ –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")],
    ],
    resize_keyboard=True
)

yes_no_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]],
    resize_keyboard=True
)

# === PDF Generator ===
def format_currency(value):
    try:
        return f"{int(float(value)):,} ‚Ç∏".replace(",", " ")
    except:
        return "‚Äî"

def generate_pdf(data):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)

    fence_type = data.get("fence_type", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    length = float(data.get("length", 0))
    foundation = data.get("foundation", False)
    slope = data.get("slope", False)

    # –¶–µ–Ω—ã
    prof_price = 2300
    lag_price = 800
    stake_price = 1500 * 2.5
    screws_price = 2000
    concrete_price = 22000

    sheets = int(length / 1.1 + 0.5)
    lag_len = length * 3
    stakes = int(length / 3) + 1
    concrete_m3 = length * 0.3 * 0.2 if foundation else 0

    total = (sheets * prof_price + lag_len * lag_price + stakes * stake_price + screws_price + concrete_m3 * concrete_price)

    # PDF
    pdf.cell(200, 10, txt="–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", ln=True, align="C")
    pdf.ln(10)
    pdf.cell(200, 10, txt=f"–¢–∏–ø: {fence_type}", ln=True)
    pdf.cell(200, 10, txt=f"–î–ª–∏–Ω–∞: {length} –º", ln=True)
    pdf.cell(200, 10, txt=f"–§—É–Ω–¥–∞–º–µ–Ω—Ç: {'–î–∞' if foundation else '–ù–µ—Ç'}", ln=True)
    pdf.cell(200, 10, txt=f"–£–∫–ª–æ–Ω: {'–î–∞' if slope else '–ù–µ—Ç'}", ln=True)
    pdf.ln(10)

    pdf.cell(100, 10, "–ú–∞—Ç–µ—Ä–∏–∞–ª", 1)
    pdf.cell(50, 10, "–ö–æ–ª-–≤–æ", 1)
    pdf.cell(40, 10, "–°—É–º–º–∞", 1, ln=True)

    pdf.cell(100, 10, "–ü—Ä–æ—Ñ–Ω–∞—Å—Ç–∏–ª", 1)
    pdf.cell(50, 10, f"{sheets} –ª–∏—Å—Ç.", 1)
    pdf.cell(40, 10, format_currency(sheets * prof_price), 1, ln=True)

    pdf.cell(100, 10, "–õ–∞–≥–∏", 1)
    pdf.cell(50, 10, f"{int(lag_len)} –º", 1)
    pdf.cell(40, 10, format_currency(lag_len * lag_price), 1, ln=True)

    pdf.cell(100, 10, "–°—Ç–æ–π–∫–∏", 1)
    pdf.cell(50, 10, f"{stakes} —à—Ç", 1)
    pdf.cell(40, 10, format_currency(stakes * stake_price), 1, ln=True)

    pdf.cell(100, 10, "–°–∞–º–æ—Ä–µ–∑—ã", 1)
    pdf.cell(50, 10, "1 –ø–∞—á–∫–∞", 1)
    pdf.cell(40, 10, format_currency(screws_price), 1, ln=True)

    if foundation:
        pdf.cell(100, 10, "–ë–µ—Ç–æ–Ω", 1)
        pdf.cell(50, 10, f"{concrete_m3:.2f} –º¬≥", 1)
        pdf.cell(40, 10, format_currency(concrete_m3 * concrete_price), 1, ln=True)

    pdf.cell(150, 10, "–ò—Ç–æ–≥–æ –∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:", 1)
    pdf.cell(40, 10, format_currency(total), 1, ln=True)

    # –†–∞–±–æ—Ç—ã
    work_rate = 19980 if foundation else 13980
    if length > 50:
        work_rate = 13980 if foundation else 9900
    if slope:
        work_rate *= 1.1
    work_total = work_rate * length

    pdf.ln(5)
    pdf.multi_cell(0, 10, f"üíº –†–∞–±–æ—Ç—ã –ø–æ–¥ –∫–ª—é—á: {format_currency(work_total)}")
    pdf.set_font("Arial", size=10)
    pdf.multi_cell(0, 6, """
–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å:
- –†–∞–∑–º–µ—Ç–∫–∞
- –ö–æ–ø–∫–∞ –∏ –ø–æ–¥—Å—ã–ø–∫–∞
- –û–ø–∞–ª—É–±–∫–∞ –∏ –±–µ—Ç–æ–Ω
- –ú–æ–Ω—Ç–∞–∂ —Å—Ç–æ–µ–∫ –∏ –ª–∞–≥
- –ö—Ä–µ–ø–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–Ω–∞—Å—Ç–∏–ª–∞
- –°–≤–∞—Ä–∫–∞ –∏ —Å–¥–∞—á–∞ —Ä–∞–±–æ—Ç
""")

    os.makedirs("output", exist_ok=True)
    file = f"./output/kp_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
    pdf.output(file)
    return file

# === Handlers ===
@router.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üôãÔ∏è –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç ZaborOFF. –†–∞—Å—Å—á–∏—Ç–∞–µ–º –∑–∞–±–æ—Ä?", reply_markup=main_menu)

@router.message(F.text == "üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç")
async def site(message: types.Message):
    await message.answer("https://zaboroff.kz")

@router.message(F.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏")
async def contact(message: types.Message):
    await message.answer("WhatsApp: https://wa.me/77022319176")

@router.message(F.text == "üìÄ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞–±–æ—Ä")
async def start_calc(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–±–æ—Ä–∞:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ü—Ä–æ—Ñ–Ω–∞—Å—Ç–∏–ª")], [KeyboardButton(text="–ë–ª–æ–∫–∏")]], resize_keyboard=True))
    await state.set_state(FenceCalc.choosing_type)

@router.message(FenceCalc.choosing_type)
async def set_type(message: types.Message, state: FSMContext):
    await state.update_data(fence_type=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –≤ –º–µ—Ç—Ä–∞—Ö:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(FenceCalc.entering_length)

@router.message(FenceCalc.entering_length)
async def set_length(message: types.Message, state: FSMContext):
    try:
        length = float(message.text)
        await state.update_data(length=length)
        await message.answer("–ë—É–¥–µ—Ç —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç?", reply_markup=yes_no_kb)
        await state.set_state(FenceCalc.foundation)
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 50")

@router.message(FenceCalc.foundation)
async def set_foundation(message: types.Message, state: FSMContext):
    await state.update_data(foundation=(message.text.lower() == "–¥–∞"))
    await message.answer("–ï—Å—Ç—å –ª–∏ —É–∫–ª–æ–Ω?", reply_markup=yes_no_kb)
    await state.set_state(FenceCalc.slope)

@router.message(FenceCalc.slope)
async def set_slope(message: types.Message, state: FSMContext):
    await state.update_data(slope=(message.text.lower() == "–¥–∞"))
    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã. –§–æ—Ä–º–∏—Ä—É—é PDF...")
    data = await state.get_data()
    try:
        file = generate_pdf(data)
        await message.answer_document(FSInputFile(file), caption="üìÑ –ì–æ—Ç–æ–≤–æ!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.message(F.text == "üìÑ –ü–æ–ª—É—á–∏—Ç—å PDF")
async def get_pdf(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if not all(k in data for k in ("fence_type", "length", "foundation", "slope")):
        return await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –∑–∞–±–æ—Ä")
    try:
        file = generate_pdf(data)
        await message.answer_document(FSInputFile(file), caption="üìÑ –í–∞—à–µ –ö–ü")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
