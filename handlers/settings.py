from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from states.settings import SettingsFSM
from db import get_user_settings, update_user_setting, reset_user_settings
import asyncpg
import os

router = Router()

# –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã"), KeyboardButton(text="üè† –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å")],
        [KeyboardButton(text="üñº –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø"), KeyboardButton(text="‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

# üì¶ –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
@router.message(F.text == "üì¶ –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_start(message: types.Message, state: FSMContext):
    await state.set_state(SettingsFSM.choosing_option)
    await message.answer("üîß –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?", reply_markup=settings_menu)

# ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã
@router.message(SettingsFSM.choosing_option, F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã")
async def ask_prices(message: types.Message, state: FSMContext):
    await state.set_state(SettingsFSM.updating_price)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        "`–ø—Ä–æ—Ñ–Ω–∞—Å—Ç–∏–ª, –ª–∞–≥–∏, —Å—Ç–æ–π–∫–∏, —Å–∞–º–æ—Ä–µ–∑—ã, –±–µ—Ç–æ–Ω`\n\n"
        "–ü—Ä–∏–º–µ—Ä: `2300, 800, 3750, 2000, 22000`",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(SettingsFSM.updating_price)
async def save_prices(message: types.Message, state: FSMContext):
    try:
        values = list(map(int, message.text.replace(" ", "").split(",")))
        if len(values) != 5:
            raise ValueError
        keys = ["profnastil_price", "lag_price", "stake_price", "screw_pack_price", "concrete_price"]
        for k, v in zip(keys, values):
            await update_user_setting(message.from_user.id, k, v)
        await message.answer("‚úÖ –¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã", reply_markup=settings_menu)
        await state.set_state(SettingsFSM.choosing_option)
    except:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# üè† –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å
@router.message(SettingsFSM.choosing_option, F.text == "üè† –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å")
async def ask_address(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    await state.set_state(SettingsFSM.updating_address)

@router.message(SettingsFSM.updating_address)
async def save_address(message: types.Message, state: FSMContext):
    await update_user_setting(message.from_user.id, "address", message.text)
    await message.answer("‚úÖ –ê–¥—Ä–µ—Å –æ–±–Ω–æ–≤–ª—ë–Ω", reply_markup=settings_menu)
    await state.set_state(SettingsFSM.choosing_option)

# üñº –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø
@router.message(SettingsFSM.choosing_option, F.text == "üñº –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø")
async def ask_logo(message: types.Message, state: FSMContext):
    await message.answer("üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ (JPG/PNG):")
    await state.set_state(SettingsFSM.uploading_logo)

@router.message(SettingsFSM.uploading_logo, F.photo)
async def save_logo(message: types.Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    await update_user_setting(message.from_user.id, "logo_file_id", file_id)
    await message.answer("‚úÖ –õ–æ–≥–æ—Ç–∏–ø —Å–æ—Ö—Ä–∞–Ω—ë–Ω", reply_markup=settings_menu)
    await state.set_state(SettingsFSM.choosing_option)

# ‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
@router.message(SettingsFSM.choosing_option, F.text == "‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
async def reset_settings(message: types.Message, state: FSMContext):
    await reset_user_settings(message.from_user.id)
    await message.answer("üîÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", reply_markup=settings_menu)

# üîô –ù–∞–∑–∞–¥
@router.message(SettingsFSM.choosing_option, F.text == "üîô –ù–∞–∑–∞–¥")
async def back(message: types.Message, state: FSMContext):
    from handlers import main_menu
    await state.clear()
    await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)

# ‚úÖ /init_db (–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã)
@router.message(Command("init_db"))
async def init_db_command(message: types.Message):
    ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    try:
        conn = await asyncpg.connect(
            host=os.getenv("DB_HOST"),
            port=os.getenv("DB_PORT"),
            database=os.getenv("DB_NAME"),
            user=os.getenv("DB_USER"),
            password=os.getenv("DB_PASS")
        )
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS user_settings (
                user_id BIGINT PRIMARY KEY,
                profnastil_price INTEGER DEFAULT 2300,
                lag_price INTEGER DEFAULT 800,
                stake_price INTEGER DEFAULT 3750,
                screw_pack_price INTEGER DEFAULT 2000,
                concrete_price INTEGER DEFAULT 22000,
                address TEXT DEFAULT 'Zaboroff.kz\n–°–∞–º–∞–ª-2, –ê–ª–º–∞—Ç—ã\n+77022319176',
                logo_file_id TEXT
            )
        """)
        await conn.close()
        await message.answer("‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_settings —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:\n<code>{e}</code>")
